generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Article {
  id          Int                @id @default(autoincrement())
  name        String
  count       Int                @default(0) // Сколько готовых артикулов на складе
  components  ArticleComponent[] // Связь с комплектующими через промежуточную таблицу
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Component {
  id                 Int                @id @default(autoincrement())
  name               String             @unique
  componentsInStock  ComponentStock[]   // Остатки комплектующих
  articles           ArticleComponent[] // Связь с артикулами через промежуточную таблицу
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model ArticleComponent {
  id           Int       @id @default(autoincrement())
  article      Article   @relation(fields: [articleId], references: [id])
  articleId    Int
  component    Component @relation(fields: [componentId], references: [id])
  componentId  Int
  quantity     Float       // Сколько комплектующих нужно на один артикул

  @@unique([articleId, componentId])
}

model Warehouse {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  location  String?
  stocks    ComponentStock[]
}

model ComponentStock {
  id          Int        @id @default(autoincrement())
  component   Component  @relation(fields: [componentId], references: [id])
  componentId Int
  warehouse   Warehouse  @relation(fields: [warehouseId], references: [id])
  warehouseId Int
  count       Int        @default(0)

  @@unique([componentId, warehouseId]) // уникальность: один компонент в одном складе — одна запись
}


