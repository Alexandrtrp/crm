generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  name     String?
  password String
  tasks    Task[] @relation("UserTasks")
  role     Role   @default(USER)  
  createdTasks Task[] @relation("CreatedTasks")
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String
  status      TaskStatus @default(TODO)  
  assigneeId  String
  creatorId   String
  assignee    User     @relation("UserTasks", fields: [assigneeId], references: [id])
  creator     User     @relation("CreatedTasks", fields: [creatorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
}

model Article {
  id         String            @id @default(uuid())
  name       String            @unique
  count      Int               @default(0) // Сколько готовых артикулов на складе
  components ArticleComponent[] // Связь с комплектующими через промежуточную таблицу
  stocks     ArticleStock[]
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Component {
  id                String           @id @default(uuid())
  name              String           @unique
  componentsInStock ComponentStock[] // Остатки комплектующих
  articles          ArticleComponent[] // Связь с артикулами через промежуточную таблицу
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ArticleComponent {
  id          String    @id @default(uuid())
  article     Article   @relation(fields: [articleId], references: [id])
  articleId   String
  component   Component @relation(fields: [componentId], references: [id])
  componentId String
  quantity    Float     // Сколько комплектующих нужно на один артикул

  @@unique([articleId, componentId])
}

model Warehouse {
  id       String          @id @default(uuid())
  name     String          @unique
  location String?
  stocks   ComponentStock[]
  articles ArticleStock[]
}

model ComponentStock {
  id          String    @id @default(uuid())
  component   Component @relation(fields: [componentId], references: [id])
  componentId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String
  count       Int       @default(0)

  @@unique([componentId, warehouseId])
}

model ArticleStock {
  id          String    @id @default(uuid())
  article     Article   @relation(fields: [articleId], references: [id])
  articleId   String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String
  count       Int       @default(0)

  @@unique([articleId, warehouseId])
}
